stages:
  - validate
  - build
  - analyze
  - release

hadolint:
  image: hadolint/hadolint:latest-debian
  stage: validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - hadolint Dockerfile

kubeval:
  image:
    name: registry.gitlab.com/japtain_cack/kubebox:latest
  stage: validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - kustomize build . | kubeval --strict

kube-score:
  image:
    name: registry.gitlab.com/japtain_cack/kubebox:latest
  stage: validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - |
      kustomize build . | kube-score score \
        --ignore-test container-image-pull-policy \
        --ignore-test container-security-context-user-group-id \
        --ignore-test pod-networkpolicy \
        --ignore-test pod-probes \
        --ignore-test container-resources \
        --ignore-test statefulset-has-servicename - || true

kicks:
  image: checkmarx/kics:latest
  stage: validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - scan -p . || true

build-test:
  image: docker:dind
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  needs:
    - hadolint
    - kubeval
    - kube-score
    - kicks
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      docker build \
        --build-arg CI_COMMIT_AUTHOR \
        --build-arg CI_COMMIT_TIMESTAMP \
        --build-arg CI_COMMIT_SHA \
        --build-arg CI_COMMIT_TAG="test" \
        --build-arg CI_PROJECT_URL \
        --pull -t "$CI_REGISTRY_IMAGE:test" .
      docker images
    - docker push "${CI_REGISTRY_IMAGE}:test"

build-versioned:
  image: docker:dind
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  needs:
    - hadolint
    - kubeval
    - kube-score
    - kicks
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      major=`echo $CI_COMMIT_TAG | cut -d. -f1`
      minor=`echo $CI_COMMIT_TAG | cut -d. -f2`
      revision=`echo $CI_COMMIT_TAG | cut -d. -f3`

      docker build \
        --build-arg CI_COMMIT_AUTHOR \
        --build-arg CI_COMMIT_TIMESTAMP \
        --build-arg CI_COMMIT_SHA \
        --build-arg CI_COMMIT_TAG \
        --build-arg CI_PROJECT_URL \
        --pull -t "${CI_REGISTRY_IMAGE}:latest" .
      docker tag "${CI_REGISTRY_IMAGE}:latest" "${CI_REGISTRY_IMAGE}:${major}"
      docker tag "${CI_REGISTRY_IMAGE}:latest" "${CI_REGISTRY_IMAGE}:${major}.${minor}"
      docker tag "${CI_REGISTRY_IMAGE}:latest" "${CI_REGISTRY_IMAGE}:${major}.${minor}.${revision}"
      docker images
    - docker push -a "${CI_REGISTRY_IMAGE}"

trivy-test:
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  stage: analyze
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  needs:
    - build-test
  script:
    - trivy image --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE:test

trivy-versioned:
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  stage: analyze
  rules:
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  needs:
    - build-versioned
  script:
    - trivy image --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

release-version:
  stage: release
  image: registry.gitlab.com/japtain_cack/labgear:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  needs:
    - build-versioned
  script:
    - |
      echo "running release_job for $CI_COMMIT_TAG"

      PREVIOUS_TAG=$(git describe --tags --abbrev=0 --always `git rev-list --tags --skip=1 --max-count=1` 2>/dev/null | cut -d \- -f 1)
      if [ -n "$PREVIOUS_TAG" ]; then
        echo "Changes since last release:"
        git log --pretty=format:"%h - %s (%an, %ar)" $PREVIOUS_TAG..$CI_COMMIT_TAG > changes.txt
      else
        echo "No tags found. Showing all commits."
        git log --pretty=format:"%h - %s (%an, %ar)" > changes.txt
      fi

      echo "CHANGES: $(cat changes.txt)"
  release:
    tag_name: '$CI_COMMIT_REF_NAME'
    description: |
      # release for $CI_COMMIT_REF_NAME.

      ## Changes
      <pre>
      $(cat changes.txt)
      </pre>

      ## Docker Image
      <pre>
      docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
      </pre>
    ref: '$CI_COMMIT_SHA'
